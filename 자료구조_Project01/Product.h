#pragma once
#include <iostream>
#include <string>
#include <string.h>
#include <iomanip>
#include <Windows.h>
#include <stdio.h>

using namespace std;

/**============================================  Product  클래스  ========================================================================
*	@author 조영제
*    @date 2014/10/14
*	@brief DoublySortedLinkedList의 상위 클래스로 상품의 정보를 가지고 있는 클래스이다.
*	@details 프로그램의 주축이 되는 상품 정보를 set,get 해주는 함수 Product 타입을 비교하기 위한 연산자 오버로딩등의 함수가 출력되어 있다.
=========================================================================================================================================*/
class Product
{
	
private:
	int product_ID; ///< 상품 ID
	int product_presentCount;///< 상품 재고량
	int product_orderCount; ///< 상품 주문량
	int product_price; ///< 상품 가격
	string product_name; ///< 상품 이름
	string Manufacture_name; ///< 상품 제조업자
	int sum_money; ///< 총 수익


public:
	/**=========================================================================================================================
	* @brief Product의 생성자
	*=========================================================================================================================*/
	Product();/// Product 생성자

	/**=========================================================================================================================
	* @brief 매개변수가 있는 Product의 생성자
	============================================================================================================================*/
	Product(int _product_ID,string _product_Name,string _Manufacture_name,int _product_price,int _product_presentCount,int _product_orderCount):
	product_ID(_product_ID),product_name(_product_Name),Manufacture_name(_Manufacture_name),product_price(_product_price),
		product_presentCount(_product_presentCount),product_orderCount(_product_orderCount){};///매개변수를 둔 프로젝트 생성자

	/**=========================================================================================================================
	* @brief Product의 소멸자
	*==========================================================================================================================*/
	~Product();/// Product 소멸자

	/***==========================================================================================================================
	*	@brief	상품의 ID를 설정한다.
	*	@pre	없다.
	*	@post	상품의 ID가 설정된다.
	*	@param	_product_id	상품의 id
	*==========================================================================================================================*/
	void set_product_ID(int _product_id){product_ID=_product_id;}; /// Product id 설정.

	/***==========================================================================================================================
	*	@brief	상품의 가격을 설정한다.
	*	@pre	없다.
	*	@post	상품의 가격이 설정된다.
	*	@param	_product_price	상품의 가격
	*==========================================================================================================================*/
	void set_product_price(int _product_price){product_price=_product_price;}; /// Product 가격 설정

	/***==========================================================================================================================
	*	@brief	상품의 입고량을 설정한다.
	*	@pre	없다.
	*	@post	상품의 입고량이 설정된다.
	*	@param	_product_count	상품의 입고량
	*==========================================================================================================================*/
	void set_presentproduct_count(int _product_count){product_presentCount=_product_count;}; /// Product 잔고량 설정

	/***==========================================================================================================================
	*	@brief	상품의 주문량을 설정한다.
	*	@pre	없다.
	*	@post	상품의 주문량이 설정된다.
	*	@param	_product_count1	상품의 주문량
	*==========================================================================================================================*/
	void set_orderproduct_count(int _product_count1){product_orderCount=_product_count1;}; /// Product 주문량 설정

	/***==========================================================================================================================
	*	@brief	상품의 이름을 설정한다.
	*	@pre	없다.
	*	@post	상품의 이름이 설정된다.
	*	@param	_product_name	상품의 이름
	*==========================================================================================================================*/
	void set_product_name(string _product_name){product_name=_product_name;}; /// Product 이름 설정

	/***==========================================================================================================================
	*	@brief	상품의 제조업자을 설정한다.
	*	@pre	없다.
	*	@post	상품의 제조업자가 설정된다.
	*	@param	_Manufacture_name	상품의 제조업자 이름
	*==========================================================================================================================*/
	void set_Manufacturet_name(string _Manufacture_name){Manufacture_name=_Manufacture_name;}; /// Product 제조업자 설정

	/***==========================================================================================================================
	*	@brief	상품의 판매금액을 설정한다.
	*	@pre	없다.
	*	@post	상품의 판매금액이 설정된다.
	*	@param	number,price 상품의 가격, 상품의 판매량
	*============================================================================================================================*/
	void set_Sum_money(int number,int price){sum_money=number*price;}

	/***==========================================================================================================================
	*	@brief	상품의 제조업자을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 제조업자가 리턴된다.
	*	@return	Manufacture_name 상품의 제조업자
	*============================================================================================================================*/
	string get_Manufacturet_name(){return Manufacture_name;}; /// Product 제조업자 리턴

	/***==========================================================================================================================
	*	@brief	상품의 이름을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 이름이 리턴된다.
	*	@return	product_name 상품의 이름
	*============================================================================================================================*/
	string get_product_name(){return product_name;}; /// Product 이름 리턴

	/***==========================================================================================================================
	*	@brief	상품의 아이디를 리턴한다.
	*	@pre	없다.
	*	@post	상품의 아이디가 리턴된다.
	*	@return	product_ID 상품의 아이디
	*============================================================================================================================*/
	int get_product_ID(){return product_ID;}; /// Product id 리턴

	/***==========================================================================================================================
	*	@brief	상품의 아이디를 리턴한다.
	*	@pre	없다.
	*	@post	상품의 아이디가 리턴된다.
	*	@return	product_ID 상품의 아이디
	*============================================================================================================================*/
	int get_product_price(){return product_price;}; /// Product 가격 리턴

	/***==========================================================================================================================
	*	@brief	상품의 입고량을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 입고량이 리턴된다.
	*	@return	product_presentCount 상품의 입고량
	*============================================================================================================================*/
	int get_presentproduct_count(){return product_presentCount;}; /// Product 잔고량 리턴

	/***==========================================================================================================================
	*	@brief	상품의 주문량을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 주문량이 리턴된다.
	*	@return	product_orderCount 상품의 주문량
	*============================================================================================================================*/
	int get_orderproduct_count(){return product_orderCount;}; /// Product 주문량 리턴

	/***==========================================================================================================================
	*	@brief	상품의 수익을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 수익이 리턴된다.
	*	@return	sum_money 상품의 수익
	*============================================================================================================================*/
	int get_money(){return sum_money;} /// Product 상품의 총금액 리턴

	/***==========================================================================================================================
	*	@brief	특정 아이템이 가지고 있는 정보(검색한 정보)를 출력한다.
	*	@pre	없다.
	*	@post	Product 가 가지고 있는 정보가 보여진다.
	*============================================================================================================================*/
	void search_product_info(); /// 특정 아이템이 가지고 있는 정보를 출력한다.

	/**===========================================================================================================================
	*	두개의 itemType(Product)을 대소를 비교한다
	*	@brief	id로 두개의 itemType(Product) 을 비교한다.( > 연산자 오버로딩을 이용한다.)
	*	@pre	두개의 아이템은 초기화 되어 있어야한다.
	*	@post	타겟 파일의 비교한뒤 그에 다른 리턴값을 출력하게 된다.
	*	@param	&item	타겟 아이템을 비교하기 위해서 사용된다
	*	@return	 this 포인터의 아이디가 더 클시 true를 리턴 아니면 false를 리턴한다
	*============================================================================================================================*/

	
	void print_preProduct();


	bool operator > (const Product &item); /// > 연산자오버로딩

	/**============================================================================================================================
	*	두개의 itemType(Product)을 비교한다
	*	@brief	id로 두개의 itemType(Product) 을 비교한다.( == 연산자 오버로딩을 이용한다.)
	*	@pre	두개의 아이템은 초기화 되어 있어야한다.
	*	@post	타겟 파일의 비교한뒤 그에 다른 리턴값을 출력하게 된다.
	*	@param	&item	타겟 아이템을 비교하기 위해서 사용된다
	*	@return	 this 포인터의 아이디가 같거나 이름이 같으면 true를 리턴 아니면 false를 리턴한다
	*============================================================================================================================*/
	bool operator == (const Product &item); /// == 연산자 오버로딩

	/**===========================================================================================================================
	*	@brief	item1에 잇는 정보를 this로 옮긴다..(= 연산자 오버로딩을 이용한다.)
	*	@pre	없다.
	*	@post	없다.
	*	@param	&item1	타겟 아이템의 정보를 옮기기 위해서 사용한다.
	*	@return	 없다.
	*============================================================================================================================*/
	void operator = (Product &item); /// = 연산자 오버로딩

	/**============================================================================================================================
	*	@brief	item에 있는 정보를 출력한다(<< 연산자 오버로딩을 이용한다.)
	*	@pre	아이템에 정보가 들어가 있어야한다.
	*	@post	해당 아이템의 정보를 출력하게 한다.
	*	@param	&item 타겟 아이템의 정보를 보여주기 위해서사용된다.
	*	@return	 &ostream 객체를 리턴한다.
	*============================================================================================================================*/
	friend ostream& operator << (ostream&os, Product &item); // << 연산자 오버로딩


};

