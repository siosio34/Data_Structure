#pragma once
#include <iostream>
#include <stdio.h>
#include <iomanip>
#include <string>
#include <time.h>
using namespace std;

/**============================================  ManageProduct  클래스  ========================================================================
*	@author 조영제
*   @date 2014/11/05
*	@brief ManageProduct 클래스로 판매상품의 정보를 가지고 있는 클래스이다.
*	@details 판매상품의 상품 정보를 set,get 해주는 함수 ManageProduct 타입을 비교하기 위한 연산자 오버로딩등의 함수가 있다.
==============================================================================================================================================*/

class ManageProduct
{
private:
	int M_Sell_Number; /// < 판매 번호
	int Custom_id; /// < 고객 ID
	int M_Product_sales; /// < 물품 수익 금액
	int M_product_price; ///< 물품 판매 가격
	int M_order_count; /// < 물품 판매 수량
	int M_product_id; /// < 물품 상품 id
	string M_product_name; /// < 물품 상품 이름
	string M_manufacture_name; /// < 물품 제조업체 이름
	

	time_t endTime; /// < 현재 물품 시간
	time_t pre_time; /// < 현재 날짜 시,분, 초

	float gap; ///< endTime과 startTime 차이를 구하는 변수
public:
	/**=========================================================================================================================================================================
	* @brief ManageProduct의 생
	*=======================================================================================================================================================================*/
	ManageProduct();

	/**=========================================================================================================================================================================
	* @brief 매개변수가 있는 ManageProduct의 생성자
	=========================================================================================================================================================================*/
	ManageProduct(int _M_Sell_Number,int _Custom_id,int _M_product_id,string _M_product_name,string _M_manufacture_name,int _M_product_price,int _M_order_count,int _sum);
	

	/**=========================================================================================================================================================================
	* @brief ManageProduct의 소멸자
	=========================================================================================================================================================================*/
	~ManageProduct(){};

	/***==========================================================================================================================
	*	@brief	상품의 판매번호를 설정한다.
	*	@pre	없다.
	*	@post	상품의 판매번호를가 설정된다.
	*	@param	_M_product_id 상품의 id
	*==========================================================================================================================*/
	void set_M_Sell_Number(int _M_product_id){M_Sell_Number=_M_product_id;}

	/***==========================================================================================================================
	*	@brief	상품을 구매한 고객 ID를 설정한다.
	*	@pre	없다.
	*	@post	상품을 구매한 고객 ID가 설정된다.
	*	@param	_Custom_id 고객의 id
	*==========================================================================================================================*/
	void set_M_Custom_Id(int _Custom_id){Custom_id=_Custom_id;}

	/***==========================================================================================================================
	*	@brief	상품을 상품의 판매금액 설정한다.
	*	@pre	없다.
	*	@post	상품의 상품의 판매금액 설정된다.
	*	@param	_M_prdocut_sales 상품의 판매금액
	*============================================================================================================================*/
	void set_M_product_sales(int _M_prdocut_sales){M_Product_sales=_M_prdocut_sales;}

	/***==========================================================================================================================
	*	@brief	상품을 가격을 설정한다.
	*	@pre	없다.
	*	@post	상품의 가격이 설정된다.
	*	@param	_M_prdocut_sales 상품의 가격
	*============================================================================================================================*/
	void set_M_product_price(int _M_product_price){M_product_price=_M_product_price;}

	/***==========================================================================================================================
	*	@brief	상품을 판매량을 설정한다.
	*	@pre	없다.
	*	@post	상품의 판매량이 설정된다.
	*	@param	_M_order_count 상품의 판매량
	*============================================================================================================================*/
	void set_M_order_count(int _M_order_count){M_order_count=_M_order_count;}

	/***===========================================================================================================================
	*	@brief	상품의 ID를 설정한다.
	*	@pre	없다.
	*	@post	상품의 ID가 설정된다.
	*	@param	_product_id	상품의 id
	*============================================================================================================================*/
	void set_M_product_id(int _M_product_id){M_product_id=_M_product_id;}

	/**==============================================================================================================================
	*	@brief	상품의 이름를 설정한다.
	*	@pre	없다.
	*	@post	상품의 이름가 설정된다.
	*	@param	_M_Manufauture_name	상품의 이름
	*================================================================================================================================*/
	void set_M_product_name(string _M_product_name){M_product_name=_M_product_name;}

	/**==============================================================================================================================
	*	@brief	상품의 제조업자를 설정한다.
	*	@pre	없다.
	*	@post	상품의 제조업자가 설정된다.
	*	@param	_M_Manufauture_name	상품의 제조업자
	*================================================================================================================================*/
	void set_M_Manufacture_name(string _M_Manufauture_name){M_manufacture_name=_M_Manufauture_name;}


	/**==============================================================================================================================
	*	@brief	상품의 현재시간이 설정한다.
	*	@pre	없다.
	*	@post	상품의 현재시간을 설정된다.
	*	@param	_endTime 현재시간
	*================================================================================================================================*/
	void set_endTime(time_t _endTime){endTime=_endTime;}
	/**==============================================================================================================================
	*	@brief	상품의 판매시간 설정한다.
	*	@pre	없다.
	*	@post	상품의 판매시간을 설정된다.
	*	@param	_pre_time 판매시간
	*================================================================================================================================*/

	void set_preTime(time_t _preTime){pre_time= _preTime;}
	/***==========================================================================================================================
	*	@brief	상품의 판매번호을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 판매번호가 리턴된다.
	*	@return	M_Sell_Number 상품의 판매번호
	*============================================================================================================================*/
	
	
	int get_M_Sell_Number() { return M_Sell_Number;}

	/***==========================================================================================================================
	*	@brief	상품을 산 고객 ID을 리턴한다.
	*	@pre	없다.
	*	@post	상품을 산 고객 ID가 리턴된다.
	*	@return	Custom_id 고객 ID
	*============================================================================================================================*/
	int get_M_Custom_Id(){return Custom_id;}

	/***==========================================================================================================================
	*	@brief	상품의 판매수익을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 판매수익이 리턴된다.
	*	@return	M_Product_sales 판매수익
	*============================================================================================================================*/
	int get_M_product_sales() {return M_Product_sales;}

	/***==========================================================================================================================
	*	@brief	상품의 판매가격을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 판매가격이 리턴된다.
	*	@return	M_product_price 판매가격
	*============================================================================================================================*/
	int get_M_product_price() {return M_product_price;}

	/***==========================================================================================================================
	*	@brief	상품의 판매량을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 판매량이 리턴된다.
	*	@return	M_order_count 판매량
	*============================================================================================================================*/
	int get_M_order_count() { return M_order_count;}

	/***==========================================================================================================================
	*	@brief	상품의 id를 리턴한다.
	*	@pre	없다.
	*	@post	상품의 id가 리턴된다.
	*	@return	M_product_id 상품의 id
	*============================================================================================================================*/
	int get_M_product_id() { return M_product_id;}

	/***==========================================================================================================================
	*	@brief	상품의 이름을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 이름이 리턴된다.
	*	@return	M_product_name 상품의 이름
	*============================================================================================================================*/
	string get_M_product_name() {return M_product_name;}

	/***==========================================================================================================================
	*	@brief	상품의 제조업자을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 제조업자이 리턴된다.
	*	@return	M_manufacture_name 상품의 제조업자
	*============================================================================================================================*/
	string get_M_Manufacture_name() {return M_manufacture_name;}

	/***==========================================================================================================================
	*	@brief	상품의 판매시간을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 판매시간이 리턴된다.
	*	@return	M_manufacture_name 상품의 판매시간
	*============================================================================================================================*/
	time_t _preTime() {return pre_time;}
	

	/***==========================================================================================================================
	*	@brief	상품의 현재시간을 리턴한다.
	*	@pre	없다.
	*	@post	상품의 현재시간이 리턴된다.
	*	@return	endTime 현재시간
	*============================================================================================================================*/
	time_t get_endTime() {return endTime;}
	
	/***==========================================================================================================================
	*	@brief	ManageProduct 가 가지고 있는 정보가 무엇을 의미하는지 알려주는 함수이다.
	*	@pre	없다.
	*	@post	ManageProduct 가 가지고 있는 정보가 보여진다.
	*============================================================================================================================*/
	void M_print_product();

	
	/***==========================================================================================================================
	*	@brief	상품이 판매되고 경과된 시간을 리턴해주는 함수이다.
	*	@pre	판매된 시간과 현재시간이 나와야 된다.
	*	@post	상품이 판매되고 경과된 시간을 리턴한다.
	*   @return 물품을 판매하고 경과된 시간이 리턴된다.
	*============================================================================================================================*/
	float Time_acquire(time_t _start,time_t _end);

	/***==========================================================================================================================
	*	@brief	상품을 잘못 판매햇을때 그것을 취소하는 함수이다.
	*	@pre	물건을 취소해야한다.
	*	@post	상품을 잘못 판매햇을때 입력한 수만큼 취소를 하게된다
	*   @return 함수가 잘 실행되면 true 아니면 false를 한다.
	*============================================================================================================================*/
	bool check_sell_input(int number,int &cancel_number);

	/***==========================================================================================================================
	*	@brief	특정 상품의 정보를 보여주는 함수이다.
	*	@pre	아이템에 정보가 들어가 있어야한다,
	*	@post	특정 상품의 정보를 보여주게된다,
	*============================================================================================================================*/
	void Print_pro();
	
	/**============================================================================================================================
	*	@brief	item에 있는 정보를 출력한다(<< 연산자 오버로딩을 이용한다.)
	*	@pre	아이템에 정보가 들어가 있어야한다.
	*	@post	해당 아이템의 정보를 출력하게 한다.
	*	@param	&item 타겟 아이템의 정보를 보여주기 위해서사용된다.
	*	@return	 &ostream 객체를 리턴한다.
	*============================================================================================================================*/
	friend ostream& operator << (ostream & os1 , ManageProduct &item);

	/**===========================================================================================================================
	*	@brief	item1에 잇는 정보를 this로 옮긴다..(= 연산자 오버로딩을 이용한다.)
	*	@pre	없다.
	*	@post	없다.
	*	@param	&item1	타겟 아이템의 정보를 옮기기 위해서 사용한다.
	*	@return	 없다.
	*============================================================================================================================*/
	void operator = (ManageProduct &item);

	/**============================================================================================================================
	*	두개의 itemType(Product)을 비교한다
	*	@brief	id로 두개의 itemType(Product) 을 비교한다.( == 연산자 오버로딩을 이용한다.)
	*	@pre	두개의 아이템은 초기화 되어 있어야한다.
	*	@post	타겟 파일의 비교한뒤 그에 다른 리턴값을 출력하게 된다.
	*	@param	&item	타겟 아이템을 비교하기 위해서 사용된다
	*	@return	 this 포인터의 구매자 ID나 물품번호가 같으면 true를 리턴 아니면 false를 리턴한다
	*============================================================================================================================*/
	bool operator == (ManageProduct &item);

	/**===========================================================================================================================
	*	두개의 itemType(Product)을 대소를 비교한다
	*	@brief	id로 두개의 itemType(Product) 을 비교한다.( > 연산자 오버로딩을 이용한다.)
	*	@pre	두개의 아이템은 초기화 되어 있어야한다.
	*	@post	타겟 파일의 비교한뒤 그에 다른 리턴값을 출력하게 된다.
	*	@param	&item	타겟 아이템을 비교하기 위해서 사용된다
	*	@return	 this 포인터의 판매시간이 더 클시 true를 리턴 아니면 false를 리턴한다
	*============================================================================================================================*/
	bool operator > (ManageProduct &item);


	/***==========================================================================================================================
	*	@brief	상품의 판매시간을 가져오는 함수이다
	*	@pre	없다.
	*	@post	상품의 판매시간이 리턴되게 된다.
	*============================================================================================================================*/
	time_t get_preTime();

	/***==========================================================================================================================
	*	@brief	현재 시간을 형식에 맞춰서 출력하는 함수이다.
	*	@pre	_currnet_time이 정의되어 있어야한다.
	*	@post	현재 시간을 형식에 맞춰서 출력한다.
	*============================================================================================================================*/
	void print_preTime(time_t _currnet_time);
};



















	
