#pragma once
#include "inc\fmod.hpp"
#include <fstream>
#include <sstream>
#include <string>
#include <Windows.h>
#include <conio.h>
#include <iostream>
#include <time.h>
#pragma comment (lib, "fmodex_vc.lib")
using namespace std;
using namespace FMOD; 

#define MAX_SOUND_TRACK 20 // 음악의 최대 한도(더 늘릴수도 있다.)

/**===========================================================================================================================================
*	마우스 포인터의 위치를 이동시키기 위한 함수이다.
*	@brief	마우스 포인터의 위치를 이동시키기 위한 함수이다.
*	@pre	x와 y의 좌표를 입력받아와야 한다.
*	@post	콘솔의 마우스 포인터를 입력한 좌표로 이동하게 된다.
===========================================================================================================================================*/
static void gotoxy(int x,int y)
{
	COORD pos={x,y};
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos); 
}

/**===========================================Bgm 클래스================================================================================
*	@author 조영제
*	@date 2014/12/04
*	@brief Bgm 클래스( 배경음악을 담당하는 클라스 ) - 마켓의 판매량을 높이기 위한 배경음악을 관리하는 클라스이다. 
*	@details 음악 DB불러오기,배경음악재생,배경음악정지,배경 볼륨 업,다운을 담당하는 클라스이다.
*===============================================================================================================================================*/

class Bgm
{
public:
	/**=========================================================================================================================
	* @brief Bgm의 생성자
	*=========================================================================================================================*/
	Bgm(){};
	/**=========================================================================================================================
	* @brief Bgm의 소멸자
	*=========================================================================================================================*/
	~Bgm(){};

	/**===========================================================================================================
	*	음악 DB를 불러와서 리스트에 저장하는 함수이다
	*	@brief	배열 안에 음악디비에 있는 내용을 넣게 된다.
	*	@pre	음악 디비가 존재해야된다,
	*	@post	DB에 있는 음악목록이 파일로 들어가게 된다.
	=============================================================================================================*/

	void load_music();

	/**===========================================================================================================
	*	음악을 재생 시키는 함수이다.
	*	@brief	음악을 재생 시킨다.
	*	@pre	으론쪽 방향키가 입력 되어야 한다.
	*	@post	DB에 있는 음악목록이 랜덤으로 재생되게 된다.
	=============================================================================================================*/

	void play_music(int num);

	/**===========================================================================================================
	*	음악을 정지 시키는 함수이다.
	*	@brief	음악을 정지 시킨다.
	*	@pre	으론쪽 방향키가 입력 되어야 한다.
	*	@post	DB에 있는 음악목록이 랜덤으로 재생되게 된다.
	=============================================================================================================*/
	void stop_music();
	
	/**===========================================================================================================
	*	음악 프로그램 관리를 위한 함수이다
	*	@brief	위쪽 방향키, 아래쪽 방향키 , 왼쪽 방향키 , 오른쪽 방향키에 각각의 효과를 부여한다.
	*	@pre	효과를 부여하기 위한 함수가 존재해야된다.
	*	@post	입력한 키에따라 각기 다른 함수가 실행된다.
	=============================================================================================================*/
	void music_case();

	/**===========================================================================================================
	*	음악의 번호를 설정하는 함수이다.
	*	@brief	Music_Num을 재설정 해주는 함수이다.
	*	@pre	없다,
	*	@post	Music_Num이 새로운 값으로 설정 되게 된다.
	=============================================================================================================*/
	void set_Music_Num(int _Music_Num){Music_Num=_Music_Num;}

	
	/**===========================================================================================================
	*	음악의 제목을 설정하는 함수이다.
	*	@brief	Music_Name을 재설정 해주는 함수이다.
	*	@pre	없다,
	*	@post	Music_Name이 새로운 값으로 설정 되게 된다.
	=============================================================================================================*/
	void set_Music_Name(string _Music_Name){Music_Name=_Music_Name;}

	/**===========================================================================================================
	*	음악의 아티스트를 설정하는 함수이다.
	*	@brief	Music_Artist을 재설정 해주는 함수이다.
	*	@pre	없다,
	*	@post	Music_Artist이 새로운 값으로 설정 되게 된다.
	=============================================================================================================*/
	void set_Music_Artist(string _Music_Artist){Music_Artist=_Music_Artist;}

	/**===========================================================================================================
	*	음악의 아티스트를 리턴하는 함수이다
	*	@brief	Music_Num을 리턴한다.
	*	@pre	Music_Num의 정보가 들어가 있어야 한다.
	*	@post	Music_Num을 리턴한다.
	=============================================================================================================*/
	int get_Music_Num(){return Music_Num;}
	/**===========================================================================================================
	*	음악의 아티스트를 리턴하는 함수이다
	*	@brief	Music_Name을 리턴한다.
	*	@pre	Music_Name의 정보가 들어가 있어야 한다.
	*	@post	Music_Name을 리턴한다.
	=============================================================================================================*/
	string get_Music_Name(){return Music_Name;}
	/**===========================================================================================================
	*	음악의 아티스트를 리턴하는 함수이다
	*	@brief	Music_Artist을 리턴한다.
	*	@pre	Music_Artist의 정보가 들어가 있어야 한다.
	*	@post	Music_Artist을 리턴한다.
	=============================================================================================================*/
	string get_Music_Artist(){return Music_Artist;}

private:

	Bgm *Music[20]; // 음악의 정보가 들어가 있는 배열
	int Music_Num; // 음악 번호
	string Music_Name; // 음악 제목
	string Music_Artist; // 음악 아티스트
	int music_count; // 디비에 들어잇는 노래개수
};






	




